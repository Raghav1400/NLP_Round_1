pip install nltk
import nltk
nltk.download('averaged_perceptron_tagger')
nltk.download('punkt')
!pip install wordcloud
pip install SpaCy
!python3 -m spacy download en_core_web_sm
import tokenize
from nltk import word_tokenize
import numpy
import pandas as pd
import matplotlib.pyplot as plt
import re
import nltk
import urllib.request
import wordcloud
from wordcloud import STOPWORDS,WordCloud
import spacy
from nltk.tokenize import word_tokenize
from nltk.tag import pos_tag
import spacy
from spacy import displacy
from collections import Counter
import spacy
import en_core_web_sm
nlp = en_core_web_sm.load()
from spacy import displacy

url1 = "https://www.gutenberg.org/cache/epub/66762/pg66762.txt"
url2 = "https://www.gutenberg.org/cache/epub/66760/pg66760.txt"
raw1 = urllib.request.urlopen(url1).read()
raw2 = urllib.request.urlopen(url2).read()
# converting byte type into string type
T1 = raw1.decode('utf-8')
T2 = raw2.decode('utf-8')
# simple pre-processing steps

# removing index and reference part
T1 = T1.split("INTRODUCTION", 1)[0]
T1 = T1.split("SOME SOURCE REFERENCES", 1)[0]
T2 = T2.split("PREFACE", 1)[0]
T2 = T2.split("BIBLIOGRAPHY", 1)[0]
# converting all into lower case
T1 = T1.lower()
T2 = T2.lower()
# tokenizing the words
t1 = nltk.word_tokenize(T1)
t2 = nltk.word_tokenize(T2)

word_counts1 = nltk.Counter(t1)
word_counts2 = nltk.Counter(t2)
# analyzing frequency distribution of tokens t1
df = pd.DataFrame.from_dict(word_counts1, orient='index')
df.plot(logy=True, kind='bar', figsize=(20, 10), title='Frequency Distribution of token t1').legend(["Frequency"])
# analyzing frequency distribution of both tokens t2
df = pd.DataFrame.from_dict(word_counts2, orient='index')
df.plot(logy=True, kind='bar', figsize=(20, 10), title='Frequency Distribution of token t2').legend(["Frequency"])
f1 = {}
for i in list(word_counts1.elements()):
    val = len(i)
    if val in f1:
        f1[val] += word_counts1[i]
    else:
       f1[val] = word_counts1[i]
f2 = list()
for i in range(1, 34):
    if i in f1:
       f2.append((i, f1[i]))
    
f3 = {}
for i in list(word_counts2.elements()):
    val = len(i)
    if val in f3:
        f3[val] += word_counts2[i]
    else:
       f3[val] = word_counts2[i]
f4 = list()
for i in range(1, 34):
    if i in f4:
       f4.append((i, f4[i]))
# relationship between the word length and frequency for both T1 and T2
df3 = pd.DataFrame.from_dict(f2)
df3.plot(logy=True, x=0, y=1, kind='bar', figsize=(20, 10), title='Word Length vs Frequency Distribution of t1', legend=False).\
    set(xlabel="Length of Words", ylabel="Frequency")
df4 = pd.DataFrame.from_dict(f2)
df4.plot(logy=True, x=0, y=1, kind='bar', figsize=(20, 10), title='Word Length vs Frequency Distribution of t2', legend=False).\
    set(xlabel="Length of Words", ylabel="Frequency")
wc1 = WordCloud(background_color="black", max_words=200, width=400, height=400, stopwords=None).generate(T1)
wc2 = WordCloud(background_color="black", max_words=200, width=400, height=400, stopwords=None).generate(T2)
# creating word cloud of both T1 and T2
plt.imshow(wc1)
plt.show()
plt.imshow(wc2)
plt.show()
word_cloud1 = WordCloud(background_color="white", max_words=200, width=400, height=400, stopwords=STOPWORDS).\
    generate(T1)
word_cloud2 = WordCloud(background_color="white", max_words=200, width=400, height=400, stopwords=STOPWORDS).\
    generate(T2)
# creating word cloud of both T1 and T2 after removing stopwords
plt.imshow(word_cloud1)
plt.show()
plt.imshow(word_cloud2)
plt.show()
p1 = nltk.pos_tag(t1)
p2 = nltk.pos_tag(t2)

f5 = {}
for i in p1:
 val = i[1]
 if val in f5:
     f5[val] += 1
 else:
     f5[val] = 1
cnt = list()
for i in list(f5.keys()):
    cnt.append((str(i), f5[str(i)]))
    
for i in p2:
 val = i[1]
 if val in f5:
     f5[val] += 1
 else:
     f5[val] = 1
cnt = list()
for i in list(f5.keys()):
    cnt.append((str(i), f5[str(i)]))
# pos tagging of both t1 and t2

df5 = pd.DataFrame.from_dict(cnt)
df5.plot(logy=True, x=0, y=1, kind='bar', figsize=(20, 10), title='Tags vs Distribution of T1', legend=False).\
    set(xlabel="Tags", yLabel="Frequency")

df5 = pd.DataFrame.from_dict(cnt)
df5.plot(logy=True, x=0, y=1, kind='bar', figsize=(20, 10), title='Tags vs Distribution of T2 ', legend=False).\
    set(xlabel="Tags", yLabel="Frequency")
plt.show()

